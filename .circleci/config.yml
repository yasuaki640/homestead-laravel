# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2
jobs:
  build:
    docker:
      # Specify the version you desire here
      - image: circleci/php:8.0.3-fpm-node-browsers
      - image: circleci/mysql:8.0.3
        environment:
        - DB_Connection: mysql_test
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # Using the RAM variation mitigates I/O contention
      # for database intensive operations.
      # - image: circleci/mysql:5.7-ram
      #
      # - image: redis:2.8.19

    steps:
      - checkout

      - run: sudo apt update # PHP CircleCI 2.0 Configuration File# PHP CircleCI 2.0 Configuration File sudo apt install zlib1g-dev libsqlite3-dev
      - run: sudo docker-php-ext-install zip pdo_mysql

      # Download and cache dependencies
      - restore_cache:
          keys:
            # "composer.lock" can be used if it is committed to the repo
            - v1-dependencies-{{ checksum "./sampleapp/composer.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          working_directory: ./sampleapp
          command: composer install -n --prefer-dist

      - save_cache:
          key: v1-dependencies-{{ checksum "./sampleapp/composer.json" }}
          paths:
            - ./vendor
      - restore_cache:
          keys:
            - node-v1-{{ checksum "./sampleapp/package.json" }}
            - node-v1-
      - run:
          working_directory: ./sampleapp
          command: yarn install
      - save_cache:
          key: node-v1-{{ checksum "./sampleapp/package.json" }}
          paths:
            - node_modules

      - run:
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.3.0
      - run:
          name: wait for db
          command: dockerize -wait tcp://localhost:3306 -timeout 1m
      - run:
          working_directory: ./sampleapp
          command: cp .env.example .env
      - run:
          working_directory: ./sampleapp
          command: php artisan migrate --env=testing --database=mysql_test --force
      # run tests with phpunit or codecept
      - run:
          working_directory: ./sampleapp
          command: vendor/bin/phpunit
